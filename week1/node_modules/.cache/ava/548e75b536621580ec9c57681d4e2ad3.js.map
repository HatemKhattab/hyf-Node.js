{"version":3,"sources":["server.test.js"],"names":["request","require","test","createServer","TIMEOUT","port","beforeEach","cb","t","context","server","listen","end","afterEach","close","testCmd","state","methods","join","response","method","get","timeout","err","fail","message","is","status","headers","deepEqual","body","range","x","Array","fill","map","error"],"mappings":"AAAA;;AAEA;;;;;AAIA,MAAMA,UAAUC,QAAQ,WAAR,CAAhB;AACA,MAAMC,OAAUD,QAAQ,KAAR,CAAhB;;AAEA,MAAM;AACJE;AADI,IAEFF,QAAQ,eAAR,CAFJ;;AAIA,MAAMG,UAAU,GAAhB;;AAEA,IAAIC,OAAO,KAAX;;AAEAH,KAAKI,UAAL,CAAgBC,EAAhB,CAAmBC,KAAK;AACtBA,IAAEC,OAAF,CAAUC,MAAV,GAAmBP,cAAnB;AACA;AACAK,IAAEC,OAAF,CAAUC,MAAV,CAAiBC,MAAjB,CAAwBN,MAAxB,EAAgCG,EAAEI,GAAlC;AACD,CAJD;;AAMAV,KAAKW,SAAL,CAAeL,KAAKA,EAAEC,OAAF,CAAUC,MAAV,CAAiBI,KAAjB,EAApB;;AAEA,SAASC,OAAT,CAAiBC,KAAjB,EAAwB,GAAGC,OAA3B,EAAoC;AAClCf,OAAM,IAAGe,QAAQC,IAAR,CAAa,KAAb,CAAoB,YAAWF,KAAM,EAA9C,EAAiD,MAAMR,CAAN,IAAW;AAC1D,QAAIW,QAAJ;AACA,SAAK,MAAMC,MAAX,IAAqBH,OAArB,EACE,IAAI;AACFE,iBAAW,MAAMnB,QAAQQ,EAAEC,OAAF,CAAUC,MAAlB,EACdW,GADc,CACT,IAAGD,MAAO,EADD,EAEdE,OAFc,CAENlB,OAFM,CAAjB;AAGD,KAJD,CAKA,OAAOmB,GAAP,EAAY;AACV,aAAOf,EAAEgB,IAAF,CACJ,qDAAoDD,IAAIE,OAAQ,EAD5D,CAAP;AAGD;;AAEHjB,MAAEkB,EAAF,CAAKP,SAASQ,MAAd,EAAsB,GAAtB,EAA2B,gCAA3B;AACAnB,MAAEkB,EAAF,CAAKP,SAASS,OAAT,CAAiB,cAAjB,CAAL,EAAuC,kBAAvC,EACE,8CADF;AAGApB,MAAEqB,SAAF,CAAYV,SAASW,IAArB,EAA2B,EAAEd,KAAF,EAA3B,EAAuC,wBAAuBA,KAAM,EAApE;AACD,GAnBD;AAoBD;;AAED,MAAMe,QAAQC,KAAK,IAAIC,KAAJ,CAAUD,CAAV,EAAaE,IAAb,EAAnB;;AAEAnB,QAAQ,EAAR,EAAY,OAAZ;AACAA,QAAQ,EAAR,EAAY,KAAZ;AACAA,QAAQ,CAAR,EAAY,UAAZ;AACAA,QAAQ,EAAR,EAAY,OAAZ;AACAA,QAAQ,EAAR,EAAY,KAAZ,EAAmB,OAAnB;AACAA,QAAQ,EAAR,EAAY,UAAZ,EAAwB,OAAxB;AACAA,QAAQ,EAAR,EAAY,KAAZ,EAAmB,KAAnB,EAA0B,OAA1B,EAAmC,KAAnC,EAA0C,UAA1C;AACAA,QAAQ,EAAR,EAAY,UAAZ,EAAwB,UAAxB,EAAoC,OAApC,EAA6C,KAA7C,EAAqD,OAArD,EAA8D,UAA9D,EAA0E,KAA1E;AACAA,QAAQ,EAAR,EAAY,GAAGgB,MAAM,EAAN,EAAUI,GAAV,CAAc,MAAM,KAApB,CAAf,EAA2C,OAA3C;AACApB,QAAQ,CAAR,EAAY,GAAGgB,MAAM,EAAN,EAAUI,GAAV,CAAc,MAAM,UAApB,CAAf,EAAgD,OAAhD;;AAEAjC,KACE,8CADF,EAEE,MAAMM,CAAN,IAAW;AACT,MAAIW,QAAJ;AACA,MAAI;AACFA,eAAW,MAAMnB,QAAQQ,EAAEC,OAAF,CAAUC,MAAlB,EACdW,GADc,CACT,iBADS,EAEdC,OAFc,CAENlB,OAFM,CAAjB;AAGD,GAJD,CAKA,OAAOmB,GAAP,EAAY;AACV,WAAOf,EAAEgB,IAAF,CACJ,qDAAoDD,IAAIE,OAAQ,EAD5D,CAAP;AAGD;;AAEDjB,IAAEkB,EAAF,CAAKP,SAASQ,MAAd,EAAsB,GAAtB,EAA2B,gCAA3B;AACAnB,IAAEkB,EAAF,CAAKP,SAASS,OAAT,CAAiB,cAAjB,CAAL,EAAuC,kBAAvC,EACE,8CADF;AAGApB,IAAEqB,SAAF,CAAYV,SAASW,IAArB,EAA2B,EAAEM,OAAO,WAAT,EAA3B,EACE,uCADF;AAGD,CAtBH","file":"server.test.js","sourcesContent":["'use strict';\n\n/* Using `supertest` purely for simplified request structure but not for its\n* `expect` methods since they don't provide descriptive-enough messages for the\n* purpose of this project\n*/\nconst request = require('supertest');\nconst test    = require('ava');\n\nconst {\n  createServer\n} = require('../src/server');\n\nconst TIMEOUT = 100;\n\nlet port = 60000;\n\ntest.beforeEach.cb(t => {\n  t.context.server = createServer();\n  // Run each test on separate port to allow concurrent testing\n  t.context.server.listen(port++, t.end);\n});\n\ntest.afterEach(t => t.context.server.close());\n\nfunction testCmd(state, ...methods) {\n  test(`/${methods.join(', /')} returns ${state}`, async t => {\n    let response;\n    for (const method of methods)\n      try {\n        response = await request(t.context.server)\n          .get(`/${method}`)\n          .timeout(TIMEOUT);\n      }\n      catch (err) {\n        return t.fail(\n          `Expected server to respond without an error, got: ${err.message}`\n        );\n      }\n\n    t.is(response.status, 200, 'Expected status code to be 200');\n    t.is(response.headers['content-type'], 'application/json',\n      'Expected content type to be application/json'\n    );\n    t.deepEqual(response.body, { state }, `Expected state to be ${state}`);\n  });\n}\n\nconst range = x => new Array(x).fill();\n\ntestCmd(10, 'state');\ntestCmd(11, 'add');\ntestCmd(9,  'subtract');\ntestCmd(10, 'reset');\ntestCmd(10, 'add', 'reset');\ntestCmd(10, 'subtract', 'reset');\ntestCmd(12, 'add', 'add', 'state', 'add', 'subtract');\ntestCmd(11, 'subtract', 'subtract', 'reset', 'add',  'state', 'subtract', 'add');\ntestCmd(20, ...range(10).map(() => 'add'), 'state');\ntestCmd(0,  ...range(10).map(() => 'subtract'), 'state');\n\ntest(\n  'querying undefined URL returns 404 Not Found',\n  async t => {\n    let response;\n    try {\n      response = await request(t.context.server)\n        .get(`/random-bad-url`)\n        .timeout(TIMEOUT);\n    }\n    catch (err) {\n      return t.fail(\n        `Expected server to respond without an error, got: ${err.message}`\n      );\n    }\n\n    t.is(response.status, 404, 'Expected status code to be 404');\n    t.is(response.headers['content-type'], 'application/json',\n      'Expected content type to be application/json'\n    );\n    t.deepEqual(response.body, { error: 'Not found' },\n      'Expected response to be 404 Not found'\n    );\n  }\n);\n"]}